use std::collections::HashSet;

use device_query::Keycode;
use fltk::enums::Key;
use once_cell::sync::Lazy;

pub(crate) fn get_key_name_in_fltk(key: i32) -> String {
    if key == 32 {
        String::from("Space")
    } else if key >= 'a' as i32 && key <= 'z' as i32 {
        String::from((key as u8 - 32) as char)
    } else if key >= '0' as i32 && key <= '9' as i32 {
        String::from(key as u8 as char)
    } else {
        match Key::from_i32(key) {
            Key::None => String::from("None"),
            Key::BackSpace => String::from("BackSpace"),
            Key::Tab => String::from("Tab"),
            Key::Enter => String::from("Enter"),
            Key::Pause => String::from("Pause"),
            Key::ScrollLock => String::from("ScrollLock"),
            Key::Escape => String::from("Escape"),
            Key::Kana => String::from("Kana"),
            Key::Eisu => String::from("Eisu"),
            Key::Yen => String::from("Yen"),
            Key::JISUnderscore => String::from("JISUnderscore"),
            Key::Home => String::from("Home"),
            Key::Left => String::from("Left"),
            Key::Up => String::from("Up"),
            Key::Right => String::from("Right"),
            Key::Down => String::from("Down"),
            Key::PageUp => String::from("PageUp"),
            Key::PageDown => String::from("PageDown"),
            Key::End => String::from("End"),
            Key::Print => String::from("Print"),
            Key::Insert => String::from("Insert"),
            Key::Menu => String::from("Menu"),
            Key::Help => String::from("Help"),
            Key::NumLock => String::from("NumLock"),
            Key::KP => String::from("KP"),
            Key::KPEnter => String::from("KPEnter"),
            Key::KPLast => String::from("KPLast"),
            Key::FLast => String::from("FLast"),
            Key::ShiftL => String::from("ShiftL"),
            Key::ShiftR => String::from("ShiftR"),
            Key::ControlL => String::from("ControlL"),
            Key::ControlR => String::from("ControlR"),
            Key::CapsLock => String::from("CapsLock"),
            Key::MetaL => String::from("MetaL"),
            Key::MetaR => String::from("MetaR"),
            Key::AltL => String::from("AltL"),
            Key::AltR => String::from("AltR"),
            Key::Delete => String::from("Delete"),

            Key::F1 => String::from("F1"),
            Key::F2 => String::from("F2"),
            Key::F3 => String::from("F3"),
            Key::F4 => String::from("F4"),
            Key::F5 => String::from("F5"),
            Key::F6 => String::from("F6"),
            Key::F7 => String::from("F7"),
            Key::F8 => String::from("F8"),
            Key::F9 => String::from("F9"),
            Key::F10 => String::from("F10"),
            Key::F11 => String::from("F11"),
            Key::F12 => String::from("F12"),

            _ => String::from("Unknown"),
        }
    }
}

pub(crate) fn get_key_value_in_device_query(key: &Keycode) -> i32 {
    match key {
        Keycode::Key0 => 48,
        Keycode::Key1 => 49,
        Keycode::Key2 => 50,
        Keycode::Key3 => 51,
        Keycode::Key4 => 52,
        Keycode::Key5 => 53,
        Keycode::Key6 => 54,
        Keycode::Key7 => 55,
        Keycode::Key8 => 56,
        Keycode::Key9 => 57,
        Keycode::A => 97,
        Keycode::B => 98,
        Keycode::C => 99,
        Keycode::D => 100,
        Keycode::E => 101,
        Keycode::F => 102,
        Keycode::G => 103,
        Keycode::H => 104,
        Keycode::I => 105,
        Keycode::J => 106,
        Keycode::K => 107,
        Keycode::L => 108,
        Keycode::M => 109,
        Keycode::N => 110,
        Keycode::O => 111,
        Keycode::P => 112,
        Keycode::Q => 113,
        Keycode::R => 114,
        Keycode::S => 115,
        Keycode::T => 116,
        Keycode::U => 117,
        Keycode::V => 118,
        Keycode::W => 119,
        Keycode::X => 120,
        Keycode::Y => 121,
        Keycode::Z => 122,
        Keycode::F1 => 65470,
        Keycode::F2 => 65471,
        Keycode::F3 => 65472,
        Keycode::F4 => 65473,
        Keycode::F5 => 65474,
        Keycode::F6 => 65475,
        Keycode::F7 => 65476,
        Keycode::F8 => 65477,
        Keycode::F9 => 65478,
        Keycode::F10 => 65479,
        Keycode::F11 => 65480,
        Keycode::F12 => 65481,
        Keycode::Escape => 65307,
        Keycode::Space => 32,
        Keycode::LControl => 65507,
        Keycode::RControl => 65508,
        Keycode::LShift => 65505,
        Keycode::RShift => 65506,
        Keycode::LAlt => 65513,
        Keycode::RAlt => 65514,
        Keycode::Command => 65511,
        Keycode::LOption => 65513,
        Keycode::ROption => 65514,
        Keycode::LMeta => 65511,
        Keycode::RMeta => 65512,
        Keycode::Enter => 65293,
        Keycode::Up => 65362,
        Keycode::Down => 65364,
        Keycode::Left => 65361,
        Keycode::Right => 65363,
        Keycode::Backspace => 65288,
        Keycode::CapsLock => 65509,
        Keycode::Tab => 65289,
        Keycode::Home => 65360,
        Keycode::End => 65367,
        Keycode::PageUp => 65365,
        Keycode::PageDown => 65366,
        Keycode::Insert => 65379,
        Keycode::Delete => 65535,
        Keycode::Numpad0 => 65456,
        Keycode::Numpad1 => 65457,
        Keycode::Numpad2 => 65458,
        Keycode::Numpad3 => 65459,
        Keycode::Numpad4 => 65460,
        Keycode::Numpad5 => 65461,
        Keycode::Numpad6 => 65462,
        Keycode::Numpad7 => 65463,
        Keycode::Numpad8 => 65464,
        Keycode::Numpad9 => 65465,
        Keycode::NumpadSubtract => 65453,
        Keycode::NumpadAdd => 65451,
        Keycode::NumpadDivide => 65455,
        Keycode::NumpadMultiply => 65450,
        Keycode::Grave => 96,
        Keycode::Minus => 45,
        Keycode::Equal => 61,
        Keycode::LeftBracket => 91,
        Keycode::RightBracket => 93,
        Keycode::BackSlash => 92,
        Keycode::Semicolon => 44,
        Keycode::Apostrophe => 39,
        Keycode::Comma => 44,
        Keycode::Dot => 46,
        Keycode::Slash => 47,
        _ => 0,
    }
}

pub(crate) fn get_hotkey_string(set: &Lazy<HashSet<crate::global::hotkey::Key>>) -> String {
    set.iter()
        .map(|key| key.string_value.clone())
        .collect::<Vec<String>>()
        .join(" + ")
}
